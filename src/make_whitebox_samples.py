# -*- coding: utf-8 -*-
"""make_whitebox_samples.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pk_8BWqMpblPkyfRiUdR394ewefZpuXX
"""

# from google.colab import drive
# import os
# drive.mount('/content/drive/',force_remount=True)
# os.chdir('/content/drive/My Drive/data_generated/')

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()
import numpy as np
import time
from keras.models import Model
from keras.layers import Dense, Input, Lambda
# from keras.applications.vgg16 import decode_predictions, preprocess_input
# from keras.applications.inception_v3 import  decode_predictions, preprocess_input
from keras.applications.resnet import  decode_predictions, preprocess_input
from keras.preprocessing import image
from l2_attack import CarliniL2
import scipy.io as sio
import random
import sys
import os

class VGG16_:
  def __init__(self, session=None, use_log=False):
    self.image_size=224
    self.num_labels=1000
    self.num_channels=3

    input_= Input((224,224,3))
    input_1 = Lambda(lambda x: preprocess_input(x*255.0))(input_)
    if use_log:
      vgg_model = tf.keras.applications.VGG16(weights='imagenet',input_tensor=input_1)
    else:
      vgg_model = tf.keras.applications.VGG16(weights='imagenet',input_tensor=input_1,classifier_activation=None)
    self.model = Model(input_,vgg_model.output)

  def predict(self, data):
    return self.model(data)

class InceptionV3_:
  def __init__(self, session=None, use_log=False):
    self.image_size=299
    self.num_labels=1000
    self.num_channels=3

    input_= Input((299,299,3))
    input_1 = Lambda(lambda x: preprocess_input(x*255.0))(input_)
    if use_log:
      model = tf.keras.applications.InceptionV3(weights='imagenet',input_tensor=input_1)
    else:
      model = tf.keras.applications.InceptionV3(weights='imagenet',input_tensor=input_1,classifier_activation=None)
    self.model = Model(input_,model.output)

  def predict(self, data):
    return self.model(data)

class ResNet101_:
  def __init__(self, session=None, use_log=False):
    self.image_size=224
    self.num_labels=1000
    self.num_channels=3

    input_= Input((224,224,3))
    input_1 = Lambda(lambda x: preprocess_input(x*255.0))(input_)
    if use_log:
      model = tf.keras.applications.ResNet101(weights='imagenet',input_tensor=input_1)
    else:
      model = tf.keras.applications.ResNet101(weights='imagenet',input_tensor=input_1,classifier_activation=None)
    self.model = Model(input_,model.output)

  def predict(self, data):
    return self.model(data)

def readimg(ff):
  f = "./data/img/imgs/"+ff
  img = image.load_img(f,target_size=(224,224))
  img = image.img_to_array(img)
  if img.shape != (224, 224, 3):
    return None
  img = img/255
  return [img, int(ff.split(".")[0])-1]

class ImageNet:
  def __init__(self):
    np.random.seed(42)
    f = r"./data/img/imgs/"
    from multiprocessing import Pool
    pool = Pool(16)
    self.files = os.listdir(f)
    number = list(np.random.choice(range(len(self.files)),5000,replace=False))
    r = pool.map(readimg, [self.files[x] for x in number])
    r = [x for x in r if x != None]
    test_data, test_labels = zip(*r)
    self.test_data = np.array(test_data)
    self.test_labels = np.zeros((len(test_labels), 1000))
    self.test_labels[np.arange(len(test_labels)), test_labels] = 1

def generate_data(data, corr_pred, samples, targeted, start, vgg):
    inputs = []
    targets = []
    i=0
    cnt=0
    while(cnt<samples):
        if(corr_pred[start+i]):
            if targeted:
                if vgg:
                    seq = random.sample(range(0,1000), 10)
                else:
                    seq = range(data.test_labels.shape[1])

                for j in seq:
                    if (j == np.argmax(data.test_labels[start+i])) and (vgg == False):
                        continue
                    inputs.append(data.test_data[start+i])
                    targets.append(np.eye(data.test_labels.shape[1])[j])
            else:
                inputs.append(data.test_data[start+i])
                targets.append(data.test_labels[start+i])
            cnt+=1
        i+=1

    inputs = np.array(inputs)
    targets = np.array(targets)

    return inputs, targets

# def PSNR(img1,img2):
#     mse = np.mean((img1-img2)**2)
#     if mse==0:
#         return 100
#     return 20*math.log10(1/np.sqrt(mse))

# def readimg(ff,key):
#   f = "./testing_database/resnet/test_set/"+ff
#   arr = sio.loadmat(f)
#   img = arr[key]
#   return img

# def get_data():
#     np.random.seed(42)
#     f = "./testing_database/resnet/test_set/"
#     test_data=[]
    
#     for x in os.listdir(f):
#        test_data.append(readimg(x,'orig'))
          
#     test_data = np.array(test_data)
#     return test_data, [x for x in os.listdir(f) if 'orig' in x]

with tf.Session() as sess:
  data = ImageNet()
  model = ResNet101_(sess,use_log=False)
  pred = np.argmax(model.model.predict(data.test_data),-1)
  corr_pred = (pred==np.argmax(data.test_labels,-1))
  acc = corr_pred.sum()/len(data.test_labels)
  print("Test Acc: {:.5f}".format(acc))
  # inputs, filenames = get_data()
  pred = np.argmax(model.model.predict(inputs),-1)
  targets = np.zeros((len(pred), 1000))
  targets[np.arange(len(targets)), pred] = 1
  attack =  CarliniL2(sess, model, batch_size=100, max_iterations=10000, confidence=0,boxmin=0,boxmax=1,targeted=False) 
  inputs, targets = generate_data(data, corr_pred, samples=1000, targeted=False, start=0, vgg=True)
  # for i in range(len(inputs)):
  #   orig_class = decode_predictions(model.model.predict(inputs[i:i+1]))[0][0][1]
  #   sio.savemat('./testing_database/inception/test_set/sample_'+str(i)+'_'+orig_class+'_orig.mat',{'orig':inputs[i]})
  timestart = time.time()
  i=0
  cnt=0
  while(i<len(inputs)):
    adv = attack.attack(inputs[i:i+100], targets[i:i+100])
    adv = np.array(adv)
    for j in range(len(adv)):
      adv_class = decode_predictions(model.model.predict(adv[j:j+1]))[0][0][1]
      orig_class = decode_predictions(model.model.predict(inputs[i+j:i+j+1]))[0][0][1]
      if adv_class!=orig_class:
        cnt+=1
        # name = './testing_database/resnet/cw/'+(filenames[i+j].split('_'))[0]+'_'+(filenames[i+j].split('_'))[1]+'_'+adv_class+'_adv.mat'
        # sio.savemat(name,{'adv':adv[j]})
        sio.savemat('./testing_database/resnet/cw_l2/sample_'+str(i+j)+'_'+adv_class+'_adv.mat',{'adv':adv[j]})
    i=i+100
  timeend = time.time()
  print("Took",timeend-timestart,"seconds to run",len(inputs),"samples.")
  print("Attack success over correct predictions:", cnt/1000)